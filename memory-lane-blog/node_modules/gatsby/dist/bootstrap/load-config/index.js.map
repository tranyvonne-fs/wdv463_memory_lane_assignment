{"version":3,"file":"index.js","names":["loadConfig","siteDirectory","processFlags","configModule","configFilePath","getConfigFile","config","preferDefault","reporter","panic","id","context","configName","enabledConfigFlags","unknownFlagMessage","unfitFlagMessage","message","handleFlags","availableFlags","flags","warn","forEach","flag","process","env","info","GATSBY_SLICES","plugins","loadThemes","rootDir","store","dispatch","internalActions","setSiteConfig"],"sources":["../../../src/bootstrap/load-config/index.ts"],"sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\nimport { preferDefault } from \"../prefer-default\"\nimport { getConfigFile } from \"../get-config-file\"\nimport { internalActions } from \"../../redux/actions\"\nimport { loadThemes } from \"../load-themes\"\nimport { store } from \"../../redux\"\nimport handleFlags from \"../../utils/handle-flags\"\nimport availableFlags from \"../../utils/flags\"\nimport { IProgram } from \"../../commands/types\"\nimport { IGatsbyConfig } from \"../../internal\"\n\nexport async function loadConfig({\n  siteDirectory,\n  processFlags = false,\n}: {\n  siteDirectory: string\n  processFlags?: boolean\n  program?: IProgram\n}): Promise<IGatsbyConfig> {\n  // Try opening the site's gatsby-config.js file.\n  const { configModule, configFilePath } = await getConfigFile(\n    siteDirectory,\n    `gatsby-config`\n  )\n  let config = preferDefault(configModule)\n\n  // The root config cannot be exported as a function, only theme configs\n  if (typeof config === `function`) {\n    reporter.panic({\n      id: `10126`,\n      context: {\n        configName: `gatsby-config`,\n        siteDirectory,\n      },\n    })\n  }\n\n  if (processFlags) {\n    // Setup flags\n    const {\n      enabledConfigFlags,\n      unknownFlagMessage,\n      unfitFlagMessage,\n      message,\n    } = handleFlags(availableFlags, config?.flags ?? {})\n\n    if (unknownFlagMessage !== ``) {\n      reporter.warn(unknownFlagMessage)\n    }\n    if (unfitFlagMessage !== ``) {\n      reporter.warn(unfitFlagMessage)\n    }\n    //  set process.env for each flag\n    enabledConfigFlags.forEach(flag => {\n      process.env[flag.env] = `true`\n    })\n\n    // Print out message.\n    if (message !== ``) {\n      reporter.info(message)\n    }\n\n    process.env.GATSBY_SLICES = `true`\n  }\n\n  // theme gatsby configs can be functions or objects\n  if (config) {\n    const plugins = await loadThemes(config, {\n      configFilePath,\n      rootDir: siteDirectory,\n    })\n    config = plugins.config\n  }\n\n  store.dispatch(internalActions.setSiteConfig(config))\n\n  return config\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIO,eAAeA,UAAU,CAAC;EAC/BC,aAAa;EACbC,YAAY,GAAG;AAKjB,CAAC,EAA0B;EACzB;EACA,MAAM;IAAEC,YAAY;IAAEC;EAAe,CAAC,GAAG,MAAM,IAAAC,4BAAa,EAC1DJ,aAAa,EACZ,eAAc,CAChB;EACD,IAAIK,MAAM,GAAG,IAAAC,4BAAa,EAACJ,YAAY,CAAC;;EAExC;EACA,IAAI,OAAOG,MAAM,KAAM,UAAS,EAAE;IAChCE,iBAAQ,CAACC,KAAK,CAAC;MACbC,EAAE,EAAG,OAAM;MACXC,OAAO,EAAE;QACPC,UAAU,EAAG,eAAc;QAC3BX;MACF;IACF,CAAC,CAAC;EACJ;EAEA,IAAIC,YAAY,EAAE;IAAA;IAChB;IACA,MAAM;MACJW,kBAAkB;MAClBC,kBAAkB;MAClBC,gBAAgB;MAChBC;IACF,CAAC,GAAG,IAAAC,oBAAW,EAACC,cAAc,8BAAEZ,MAAM,4CAAN,QAAQa,KAAK,yDAAI,CAAC,CAAC,CAAC;IAEpD,IAAIL,kBAAkB,KAAM,EAAC,EAAE;MAC7BN,iBAAQ,CAACY,IAAI,CAACN,kBAAkB,CAAC;IACnC;IACA,IAAIC,gBAAgB,KAAM,EAAC,EAAE;MAC3BP,iBAAQ,CAACY,IAAI,CAACL,gBAAgB,CAAC;IACjC;IACA;IACAF,kBAAkB,CAACQ,OAAO,CAACC,IAAI,IAAI;MACjCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACE,GAAG,CAAC,GAAI,MAAK;IAChC,CAAC,CAAC;;IAEF;IACA,IAAIR,OAAO,KAAM,EAAC,EAAE;MAClBR,iBAAQ,CAACiB,IAAI,CAACT,OAAO,CAAC;IACxB;IAEAO,OAAO,CAACC,GAAG,CAACE,aAAa,GAAI,MAAK;EACpC;;EAEA;EACA,IAAIpB,MAAM,EAAE;IACV,MAAMqB,OAAO,GAAG,MAAM,IAAAC,sBAAU,EAACtB,MAAM,EAAE;MACvCF,cAAc;MACdyB,OAAO,EAAE5B;IACX,CAAC,CAAC;IACFK,MAAM,GAAGqB,OAAO,CAACrB,MAAM;EACzB;EAEAwB,YAAK,CAACC,QAAQ,CAACC,wBAAe,CAACC,aAAa,CAAC3B,MAAM,CAAC,CAAC;EAErD,OAAOA,MAAM;AACf"}