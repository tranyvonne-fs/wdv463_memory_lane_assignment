{"version":3,"file":"component---src-pages-api-best-practices-js-130734134cd02a67dd62.js","mappings":"8LAAA,EAAe,IAA0B,4DCI1B,SAASA,IACtB,OACEC,EAAAA,cAAA,QAAMC,UAAU,wDACdD,EAAAA,cAACE,EAAAA,GAAI,CACHC,GAAG,IACHF,UAAU,mEACX,kBAGDD,EAAAA,cAAA,MAAIC,UAAU,2CAA0C,8CAGxDD,EAAAA,cAAA,OACEI,IAAKC,EACLC,IAAI,iBACJL,UAAU,8BAEZD,EAAAA,cAAA,KAAGC,UAAU,QAAO,oMAKpBD,EAAAA,cAAA,MAAIC,UAAU,mCACZD,EAAAA,cAAA,UAAI,KACAA,EAAAA,cAAA,cAAQ,wCAA6C,4DAEzDA,EAAAA,cAAA,UAAI,KACAA,EAAAA,cAAA,cAAQ,sBAA2B,gEAEvCA,EAAAA,cAAA,UAAI,KACAA,EAAAA,cAAA,cAAQ,iBAAsB,oEAElCA,EAAAA,cAAA,UAAI,KACAA,EAAAA,cAAA,cAAQ,0CAA+C,8DAE3DA,EAAAA,cAAA,UAAI,KACAA,EAAAA,cAAA,cAAQ,mBAAwB,gFAGtCA,EAAAA,cAAA,KAAGC,UAAU,QAAO,0GAK1B,C","sources":["webpack://memory-lane-blog/./src/images/api-structure.png","webpack://memory-lane-blog/./src/pages/api-best-practices.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/api-structure-58630d52f530e659e7c9c80b6b5dba31.png\";","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport apiImage from \"../images/api-structure.png\"\n\nexport default function ReactAPIPage() {\n  return (\n    <main className=\"max-w-3xl mx-auto px-6 py-12 font-sans text-gray-800\">\n      <Link\n        to=\"/\"\n        className=\"inline-block mb-6 text-indigo-600 hover:underline font-semibold\"\n      >\n        ← Back to Home\n      </Link>\n      <h1 className=\"text-3xl font-bold text-indigo-600 mb-4\">\n        Best Practices for Using APIs Within React\n      </h1>\n      <img\n        src={apiImage}\n        alt=\"React API Flow\"\n        className=\"rounded-lg shadow-lg mb-6\"\n      />\n      <p className=\"mb-4\">\n        When using APIs in React, organizing your fetch logic and separating\n        concerns is key to building maintainable applications. It also helps\n        avoid unnecessary re-renders and improves performance.\n      </p>\n      <ul className=\"list-disc list-inside space-y-2\">\n        <li>\n          ✅ <strong>Use `useEffect` + `fetch` or `axios`</strong>: Always call APIs in `useEffect` when components mount.\n        </li>\n        <li>\n          ✅ <strong>Abstract API logic</strong>: Move `fetch` or `axios` logic into helper files for reuse.\n        </li>\n        <li>\n          ✅ <strong>Handle errors</strong>: Wrap calls in `try/catch` and display fallback UI when needed.\n        </li>\n        <li>\n          ✅ <strong>Use `useState` and `useReducer` wisely</strong>: Store response data cleanly and update only when needed.\n        </li>\n        <li>\n          ✅ <strong>Debounce inputs</strong>: When searching or filtering via API, debounce user input to reduce calls.\n        </li>\n      </ul>\n      <p className=\"mt-4\">\n        Following these best practices can help make your API integration clean, responsive, and future-proof.\n      </p>\n    </main>\n  )\n}\n"],"names":["ReactAPIPage","React","className","Link","to","src","apiImage","alt"],"sourceRoot":""}