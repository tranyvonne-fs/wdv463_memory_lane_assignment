{"version":3,"file":"component---src-pages-api-best-practices-js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAe,4DAA4D;;ACI5D,QAAS,CAAAG,YAAYA,CAAA,CAAG,CACrC,mBACEH,gCAAA,SAAMK,SAAS,CAAC,sDAAsD,eACpEL,gCAAA,CAACC,yBAAI,EACHK,EAAE,CAAC,GAAG,CACND,SAAS,CAAC,iEAAiE,EAC5E,qBAEK,CAAC,cACPL,gCAAA,OAAIK,SAAS,CAAC,yCAAyC,EAAC,4CAEpD,CAAC,cACLL,gCAAA,QACEO,GAAG,CAAEL,aAAS,CACdM,GAAG,CAAC,gBAAgB,CACpBH,SAAS,CAAC,2BAA2B,CACtC,CAAC,cACFL,gCAAA,MAAGK,SAAS,CAAC,MAAM,EAAC,kMAIjB,CAAC,cACJL,gCAAA,OAAIK,SAAS,CAAC,iCAAiC,eAC7CL,gCAAA,WAAI,SACA,cAAAA,gCAAA,eAAQ,sCAA4C,CAAC,2DACrD,CAAC,cACLA,gCAAA,WAAI,SACA,cAAAA,gCAAA,eAAQ,oBAA0B,CAAC,+DACnC,CAAC,cACLA,gCAAA,WAAI,SACA,cAAAA,gCAAA,eAAQ,eAAqB,CAAC,mEAC9B,CAAC,cACLA,gCAAA,WAAI,SACA,cAAAA,gCAAA,eAAQ,wCAA8C,CAAC,6DACvD,CAAC,cACLA,gCAAA,WAAI,SACA,cAAAA,gCAAA,eAAQ,iBAAuB,CAAC,8EAChC,CACF,CAAC,cACLA,gCAAA,MAAGK,SAAS,CAAC,MAAM,EAAC,wGAEjB,CACC,CAAC,CAEX","sources":["webpack://memory-lane-blog/./src/images/api-structure.png","webpack://memory-lane-blog/./src/pages/api-best-practices.js"],"sourcesContent":["export default \"/static/api-structure-58630d52f530e659e7c9c80b6b5dba31.png\";","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport apiImage from \"../images/api-structure.png\"\n\nexport default function ReactAPIPage() {\n  return (\n    <main className=\"max-w-3xl mx-auto px-6 py-12 font-sans text-gray-800\">\n      <Link\n        to=\"/\"\n        className=\"inline-block mb-6 text-indigo-600 hover:underline font-semibold\"\n      >\n        ← Back to Home\n      </Link>\n      <h1 className=\"text-3xl font-bold text-indigo-600 mb-4\">\n        Best Practices for Using APIs Within React\n      </h1>\n      <img\n        src={apiImage}\n        alt=\"React API Flow\"\n        className=\"rounded-lg shadow-lg mb-6\"\n      />\n      <p className=\"mb-4\">\n        When using APIs in React, organizing your fetch logic and separating\n        concerns is key to building maintainable applications. It also helps\n        avoid unnecessary re-renders and improves performance.\n      </p>\n      <ul className=\"list-disc list-inside space-y-2\">\n        <li>\n          ✅ <strong>Use `useEffect` + `fetch` or `axios`</strong>: Always call APIs in `useEffect` when components mount.\n        </li>\n        <li>\n          ✅ <strong>Abstract API logic</strong>: Move `fetch` or `axios` logic into helper files for reuse.\n        </li>\n        <li>\n          ✅ <strong>Handle errors</strong>: Wrap calls in `try/catch` and display fallback UI when needed.\n        </li>\n        <li>\n          ✅ <strong>Use `useState` and `useReducer` wisely</strong>: Store response data cleanly and update only when needed.\n        </li>\n        <li>\n          ✅ <strong>Debounce inputs</strong>: When searching or filtering via API, debounce user input to reduce calls.\n        </li>\n      </ul>\n      <p className=\"mt-4\">\n        Following these best practices can help make your API integration clean, responsive, and future-proof.\n      </p>\n    </main>\n  )\n}\n"],"names":["React","Link","apiImage","ReactAPIPage","createElement","className","to","src","alt"],"sourceRoot":""}